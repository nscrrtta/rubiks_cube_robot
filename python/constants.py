import time


##########################################################################
############################## GUI CONSTANTS #############################
##########################################################################

# Size of 7" touch screen
WINDOW_SIZE = (1024, 535)

# PNG_PATH = '/home/pi/Rubiks-Cube/png'
PNG_PATH = '/Users/nicksciarretta/Desktop/rubiks_cube_robot-main/png'

BUTTON_HITBOX_SIZE   = 52 # pixels
COLOUR_SELECTOR_SIZE = 56 # pixels
RHOMBUS_SIZE         = 85 # pixels

BACKGROUND_RGB = (50,50,50)

RGB_VALUES = {
    0: (250, 140,  51), # Orange
    1: (105, 245, 128), # Green
    2: (255, 255, 255), # White
    3: (64,  183, 255), # Blue
    4: (241, 241,  60), # Yellow
    5: (250,  90,  90)  # Red
}

# x,y coordinates
LEFT_CENTER_XY  = (236, 270) # Center coordinate of three faces on left
RIGHT_CENTER_XY = (787, 270) # Center coordinate of three faces on right
SOLVE_BUTTON_XY = (482, 155)
SCRMB_BUTTON_XY = (482, 242)
ABORT_BUTTON_XY = (482, 329)
FRU_PNG_XY      = ( 10,  10)
LBD_PNG_XY      = (933,  10)

COLOUR_SELECTOR_XY = {
    5: (417, 15), # Red
    2: (484, 15), # White
    3: (551, 15), # Blue

    1: (417, 464), # Green
    4: (484, 464), # Yellow
    0: (551, 464), # Orange
}

##########################################################################
##########################################################################
##########################################################################


##########################################################################
############################# GPIO CONSTANTS #############################
##########################################################################

# Number of motor steps in one 90 degree turn
NUM_STEPS = 400

# Delay between motor steps (microseconds)
STEP_DELAY = 50

# Converts seconds to microseconds
MICRO_SLEEP = lambda x: time.sleep(x/1_000_000)

# Enable pin (common to all motor drivers)
ENABLE_PIN = 21

# Front-face motor pins
F_MOTOR_STEP_PIN = 6
F_MOTOR_DIR_PIN  = 5

# Back-face motor pins 
B_MOTOR_STEP_PIN = 22
B_MOTOR_DIR_PIN  = 23

# Left-face motor pins
L_MOTOR_STEP_PIN = 25
L_MOTOR_DIR_PIN  = 24

# Right-face motor pins
R_MOTOR_STEP_PIN = 27
R_MOTOR_DIR_PIN  = 17

# Down-face motor pins
D_MOTOR_STEP_PIN = 16
D_MOTOR_DIR_PIN  = 26

##########################################################################
##########################################################################
##########################################################################


##########################################################################
########################### GENERAL CONSTANTS ############################
##########################################################################

CROSS_PERMUTATION_LIMIT = float('inf')
CROSS_EXPLORATION_LIMIT = 10

F2L_PERMUTATION_LIMIT = 10
F2L_EXPLORATION_LIMIT = 100


# Moves
F = "F1"; F2 = "F2"; Fi = "F3";     f = "f1"; f2 = "f2"; fi = "f3"
B = "B1"; B2 = "B2"; Bi = "B3";     b = "b1"; b2 = "b2"; bi = "b3"
L = "L1"; L2 = "L2"; Li = "L3";     l = "l1"; l2 = "l2"; li = "l3"
R = "R1"; R2 = "R2"; Ri = "R3";     r = "r1"; r2 = "r2"; ri = "r3"
U = "U1"; U2 = "U2"; Ui = "U3";     u = "u1"; u2 = "u2"; ui = "u3"
D = "D1"; D2 = "D2"; Di = "D3";     d = "d1"; d2 = "d2"; di = "d3"
M = "M1"; M2 = "M2"; Mi = "M3"
E = "E1"; E2 = "E2"; Ei = "E3"
S = "S1"; S2 = "S2"; Si = "S3"


# Cube rotations
x = "x"; xi = "xi" # up / down
y = "y"; yi = "yi" # left / right
z = "z"; zi = "zi" # cw / ccw


# Moves that rotate opposite faces of cube
OPPOSITE_FACES = {'U':'D', 'D':'U', 'L':'R', 'R':'L', 'F':'B', 'B':'F'}


# Moves that link two edges
EDGE_LINKS = {
    0: {3: (U,), 2:(U2,), 1:(Ui,), 5:(F,), 8:(F2,), 4:(Fi,)},
    1: {0: (U,), 3:(U2,), 2:(Ui,), 6:(R,), 9:(R2,), 5:(Ri,)},
    2: {1: (U,), 0:(U2,), 3:(Ui,), 7:(B,),10:(B2,), 6:(Bi,)},
    3: {2: (U,), 1:(U2,), 0:(Ui,), 4:(L,),11:(L2,), 7:(Li,)},
    4: {0: (F,), 5:(F2,), 8:(Fi,),11:(L,), 7:(L2,), 3:(Li,)},
    5: {8: (F,), 4:(F2,), 0:(Fi,), 1:(R,), 6:(R2,), 9:(Ri,)},
    6: {2: (B,), 7:(B2,),10:(Bi,), 9:(R,), 5:(R2,), 1:(Ri,)},
    7: {10:(B,), 6:(B2,), 2:(Bi,), 3:(L,), 4:(L2,),11:(Li,)},
    8: {9: (D,),10:(D2,),11:(Di,), 4:(F,), 0:(F2,), 5:(Fi,)},
    9: {10:(D,),11:(D2,), 8:(Di,), 5:(R,), 1:(R2,), 6:(Ri,)},
    10:{11:(D,), 8:(D2,), 9:(Di,), 6:(B,), 2:(B2,), 7:(Bi,)},
    11:{8: (D,), 9:(D2,),10:(Di,), 7:(L,), 3:(L2,), 4:(Li,)},
}


# Moves that link two corners
CORNER_LINKS = {
    0: {3:(U,Li), 1:(Ui,F), 4:(L,Fi), 2:(U2,)},
    1: {0:(U,Fi), 2:(Ui,R), 5:(F,Ri), 3:(U2,)},
    2: {1:(U,Ri), 3:(Ui,B), 6:(R,Bi), 0:(U2,)},
    3: {2:(U,Bi), 0:(Ui,L), 7:(B,Li), 1:(U2,)},
    4: {5:(D,Fi), 7:(Di,L), 0:(F,Li)},
    5: {6:(D,Ri), 4:(Di,F), 1:(R,Fi)},
    6: {7:(D,Bi), 5:(Di,R), 2:(B,Ri)},
    7: {4:(D,Li), 6:(Di,B), 3:(L,Bi)}
}


# All 58 possible scenarios for OLL
OLL_DICT = {

    # Cross shapes
    (
        (' ',' ',' ',' ',' '),
        ('-','o','x','o','-'),
        (' ','x','x','x',' '),
        ('-','o','x','o','-'),
        (' ',' ',' ',' ',' '),
    ): [R, U, Ri, U, R, Ui, Ri, U, R, U2, Ri],

    (
        (' ',' ',' ','-',' '),
        ('-','o','x','o',' '),
        (' ','x','x','x',' '),
        ('-','o','x','o',' '),
        (' ',' ',' ','-',' '),
    ): [R, U2, R2, Ui, R2, Ui, R2, U2, R],

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','x',' '),
        (' ','x','x','x',' '),
        (' ','o','x','o',' '),
        (' ','-',' ','-',' '),
    ): [R2, D, Ri, U2, R, Di, Ri, U2, Ri],

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','x',' '),
        (' ','x','x','x',' '),
        (' ','o','x','x',' '),
        (' ','-',' ',' ',' '),
    ): [r, U, Ri, Ui, ri, F, R, Fi],

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','o','-'),
        (' ','x','x','x',' '),
        (' ','o','x','x',' '),
        (' ','-',' ',' ',' '),
    ): [F, Ri, Fi, r, U, R, Ui, ri],

    (
        (' ',' ',' ',' ',' '),
        ('-','o','x','x',' '),
        (' ','x','x','x',' '),
        (' ','o','x','o','-'),
        (' ','-',' ',' ',' '),
    ): [R, U2, Ri, Ui, R, Ui, Ri],

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','o','-'),
        (' ','x','x','x',' '),
        (' ','x','x','o',' '),
        (' ',' ',' ','-',' '),
    ): [R, U, Ri, U, R, U2, Ri],

    # All corners oriented

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','x',' '),
        (' ','x','x','o','-'),
        (' ','x','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [r, U, Ri, Ui, ri, R, U, R, Ui, Ri],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','x',' '),
        (' ','x','x','x',' '),
        (' ','x','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [R, U, Ri, Ui, Mi, U, R, Ui, ri],

    # T shapes

    (
        (' ','-','-',' ',' '),
        (' ','o','o','x',' '),
        (' ','x','x','x',' '),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [R, U, Ri, Ui, Ri, F, R, Fi],

    (
        (' ',' ','-',' ',' '),
        ('-','o','o','x',' '),
        (' ','x','x','x',' '),
        ('-','o','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [F, R, U, Ri, Ui, Fi],

    # W shapes

    (
        (' ',' ',' ','-',' '),
        (' ','x','x','o',' '),
        ('-','o','x','x',' '),
        ('-','o','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [Li, Ui, L, Ui, Li, U, L, U, L, Fi, Li, F],

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','x',' '),
        (' ','x','x','o','-'),
        (' ','x','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [R, U, Ri, U, R, Ui, Ri, Ui, Ri, F, R, Fi],

    # Square shapes

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','o','-'),
        (' ','x','x','o','-'),
        ('-','o','o','o',' '),
        (' ',' ','-','-',' '),
    ): [li, U2, L, U, Li, U, l],

    (
        (' ',' ',' ',' ',' '),
        ('-','o','x','x',' '),
        ('-','o','x','x',' '),
        (' ','o','o','o','-'),
        (' ','-','-',' ',' '),
    ): [r, U2, Ri, Ui, R, Ui, ri],

    # P shapes

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','x',' '),
        ('-','o','x','x',' '),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [Ri, Ui, F, U, R, Ui, Ri, Fi, R],

    (
        (' ',' ',' ','-',' '),
        (' ','x','x','o',' '),
        (' ','x','x','o','-'),
        (' ','x','o','o',' '),
        (' ',' ','-','-',' '),
    ): [L, U, Fi, Ui, Li, U, L, F, Li],

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','x',' '),
        (' ','x','x','o','-'),
        (' ','o','o','o',' '),
        (' ','-','-','-',' '),
    ): [Ri, Ui, Fi, U, F, R],

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','o','-'),
        (' ','x','x','o','-'),
        (' ','x','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [F, U, R, Ui, Ri, Fi],

    # Fish shapes

    (
        (' ',' ',' ','-',' '),
        ('-','o','x','o',' '),
        (' ','x','x','o','-'),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [R, U, Ri, Ui, Ri, F, R2, U, Ri, Ui, Fi],

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','o','-'),
        (' ','x','x','o','-'),
        ('-','o','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [r, R2, U2, R, U, Ri, U, R, U, R, ri],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','o','-'),
        ('-','o','x','x',' '),
        (' ','o','x','x',' '),
        (' ','-',' ',' ',' '),
    ): [R, U2, R2, F, R, Fi, R, U2, Ri],

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','o','-'),
        (' ','x','x','o','-'),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [F, Ri, Fi, R, U, R, Ui, Ri],

    # C shapes

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','x',' '),
        ('-','o','x','o','-'),
        (' ','o','x','x',' '),
        (' ','-',' ',' ',' '),
    ): [f, R, fi, Ui, ri, Ui, R, U, Mi],

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','o','-'),
        ('-','o','x','o','-'),
        (' ','x','x','o','-'),
        (' ',' ',' ',' ',' '),
    ): [Ri, Ui, Ri, F, R, Fi, U, R],

    # Small lightning bolts

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','o','-'),
        (' ','x','x','o','-'),
        (' ','x','o','o',' '),
        (' ',' ','-','-',' '),
    ): [r, U, Ri, U, R, U2, ri],

    (
        (' ',' ',' ','-',' '),
        ('-','o','x','o',' '),
        ('-','o','x','x',' '),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [li, Ui, L, Ui, Li, U2, l],

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','x',' '),
        (' ','x','x','o','-'),
        ('-','o','o','o',' '),
        (' ',' ','-','-',' '),
    ): [Si, U2, R, U, Ri, U, R, U2, Ri, S],

    (
        (' ',' ',' ','-',' '),
        (' ','x','x','o',' '),
        ('-','o','x','x',' '),
        (' ','o','o','o','-'),
        (' ','-','-',' ',' '),
    ): [Mi, Ri, Ui, R, Ui, Ri, U2, R, Ui, R, ri],

    # Big lightning bolts

    (
        (' ',' ','-',' ',' '),
        ('-','o','o','x',' '),
        (' ','x','x','x',' '),
        (' ','x','o','o',' '),
        (' ',' ','-','-',' '),
    ): [fi, L, F, Li, Ui, Li, U, L, S],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','o','-'),
        (' ','x','x','x',' '),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [f, Ri, Fi, R, U, R, Ui, Ri, Si],

    # Small L shapes

    (
        (' ','-',' ','-',' '),
        (' ','o','x','o',' '),
        (' ','x','x','o','-'),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [F, Ri, Fi, R, U2, R, Ui, Ri, U, R, U2, Ri],

    (
        (' ',' ',' ','-',' '),
        ('-','o','x','o',' '),
        (' ','x','x','o','-'),
        ('-','o','o','o',' '),
        (' ',' ','-','-',' '),
    ): [F, R, U, Ri, Ui, R, U, Ri, Ui, Fi],

    (
        (' ',' ',' ','-',' '),
        ('-','o','x','o',' '),
        ('-','o','x','x',' '),
        ('-','o','o','o',' '),
        (' ',' ','-','-',' '),
    ): [r, Ui, r2, U, r2, U, r2, Ui, r],

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','o','-'),
        (' ','x','x','o','-'),
        (' ','o','o','o','-'),
        (' ','-','-',' ',' '),
    ): [li, U, l2, Ui, l2, Ui, l2, U, li],

    (
        (' ',' ',' ',' ',' '),
        ('-','o','x','o','-'),
        (' ','x','x','o','-'),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [li, Ui, L, Ui, Li, U, L, Ui, Li, U2, l],

    (
        (' ',' ',' ',' ',' '),
        ('-','o','x','o','-'),
        ('-','o','x','x',' '),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [r, U, Ri, U, R, Ui, Ri, U, R, U2, ri],

    # Knight move shapes

    (
        (' ','-','-',' ',' '),
        (' ','o','o','o','-'),
        (' ','x','x','x',' '),
        (' ','x','o','o',' '),
        (' ',' ','-','-',' '),
    ): [F, U, R, Ui, R2, Fi, R, U, R, Ui, Ri],

    (
        (' ',' ','-','-',' '),
        ('-','o','o','o',' '),
        (' ','x','x','x',' '),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [Ri, F, R, U, Ri, Fi, R, F, Ui, Fi],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','o','-'),
        (' ','x','x','x',' '),
        ('-','o','o','o',' '),
        (' ',' ','-','-',' '),
    ): [li, Ui, l, Li, Ui, L, U, li, U, l],

    (
        (' ',' ','-',' ',' '),
        ('-','o','o','x',' '),
        (' ','x','x','x',' '),
        (' ','o','o','o','-'),
        (' ','-','-',' ',' '),
    ): [r, U, ri, R, U, Ri, Ui, r, Ui, ri],

    # I shapes

    (
        (' ','-','-',' ',' '),
        (' ','o','o','o','-'),
        (' ','x','x','x',' '),
        (' ','o','o','o','-'),
        (' ','-','-',' ',' '),
    ): [F, U, R, Ui, Ri, U, R, Ui, Ri, Fi],

    (
        (' ',' ',' ','-',' '),
        ('-','o','x','o',' '),
        ('-','o','x','o','-'),
        ('-','o','x','o',' '),
        (' ',' ',' ','-',' '),
    ): [Ri, Fi, Ui, F, Ui, R, U, Ri, U, R],

    (
        (' ','-','-','-',' '),
        (' ','o','o','o',' '),
        (' ','x','x','x',' '),
        (' ','o','o','o',' '),
        (' ','-','-','-',' '),
    ): [Ri, F, U, R, Ui, R2, Fi, R2, U, Ri, Ui, R],

    (
        (' ',' ','-',' ',' '),
        ('-','o','o','o','-'),
        (' ','x','x','x',' '),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [r, U, ri, U, R, Ui, Ri, U, R, Ui, Mi, Ui, ri],

    # Cactus shapes

    (
        (' ','-',' ',' ',' '),
        (' ','o','x','x',' '),
        (' ','x','x','o','-'),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [l, D, li, U, l, Di, l2, U, l, Ui, li, Ui, l],

    (
        (' ',' ',' ','-',' '),
        (' ','x','x','o',' '),
        ('-','o','x','x',' '),
        (' ','x','o','o',' '),
        (' ',' ','-','-',' '),
    ): [ri, Di, r, Ui, ri, D, r2, Ui, ri, U, r, U, ri],

    (
        (' ','-',' ','-',' '),
        (' ','o','x','o',' '),
        (' ','x','x','o','-'),
        (' ','x','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [R, U, Ri, U, R, U2, Ri, F, R, U, Ri, Ui, Fi],

    (
        (' ',' ',' ',' ',' '),
        ('-','o','x','x',' '),
        (' ','x','x','o','-'),
        ('-','o','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [Ri, F, R, Fi, Ri, F, R, Fi, R, U, Ri, Ui, R, U, Ri],

    # No edges oriented

    (
        (' ',' ','-',' ',' '),
        ('-','o','o','o','-'),
        ('-','o','x','o','-'),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [R, U2, R2, F, R, Fi, U2, Ri, F, R, Fi],

    (
        (' ','-','-','-',' '),
        (' ','o','o','o',' '),
        ('-','o','x','o','-'),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [L, F, Li, U2, R, U2, Ri, U2, L, Fi, Li],

    (
        (' ','-','-',' ',' '),
        (' ','o','o','o','-'),
        ('-','o','x','o','-'),
        (' ','x','o','o',' '),
        (' ',' ','-','-',' '),
    ): [ri, R2, U, Ri, U, r, U2, ri, U, Mi],

    (
        (' ',' ','-','-',' '),
        ('-','o','o','o',' '),
        ('-','o','x','o','-'),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [l, L2, Ui, L, Ui, li, U2, l, Ui, Mi],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','o','-'),
        ('-','o','x','o','-'),
        (' ','o','o','x',' '),
        (' ','-','-',' ',' '),
    ): [F, Ri, Fi, R2, ri, U, R, Ui, Ri, Ui, Mi],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','x',' '),
        ('-','o','x','o','-'),
        (' ','o','o','o',' '),
        (' ','-','-','-',' '),
    ): [r, U, Ri, U, R, U2, r2, Ui, R, Ui, Ri, U2, r],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','x',' '),
        ('-','o','x','o','-'),
        ('-','o','o','o','-'),
        (' ',' ','-',' ',' '),
    ): [ri, R, U, R, U, Ri, Ui, Mi, Ri, F, R, Fi],

    (
        (' ',' ','-',' ',' '),
        (' ','x','o','x',' '),
        ('-','o','x','o','-'),
        (' ','x','o','x',' '),
        (' ',' ','-',' ',' '),
    ): [r, U, Ri, Ui, M2, U, R, Ui, Ri, Ui, Mi],

    # Already solved

    (
        (' ',' ',' ',' ',' '),
        (' ','x','x','x',' '),
        (' ','x','x','x',' '),
        (' ','x','x','x',' '),
        (' ',' ',' ',' ',' '),
    ): []
}


# All 22 possible scenarios for PLL
PLL_DICT = {

    # Aa
    (
        (' ','b','c','a',' '),
        ('c','x','x','x','d'),
        ('d','x','x','x','b'),
        ('c','x','x','x','b'),
        (' ','d','a','a',' ')
    ): [L2, B2, Li, Fi, L, B2, Li, F, Li],

    # Ab
    (
        (' ','d','c','c',' '),
        ('a','x','x','x','b'),
        ('d','x','x','x','b'),
        ('a','x','x','x','d'),
        (' ','b','a','c',' ')
    ): [L2, F2, L, B, Li, F2, L, Bi, L],

    # F
    (
        (' ','a','c','b',' '),
        ('d','x','x','x','c'),
        ('d','x','x','x','b'),
        ('d','x','x','x','a'),
        (' ','c','a','b',' ')
    ): [Ri, Ui, Fi, R, U, Ri, Ui, Ri, F, R2, Ui, Ri, Ui, R, U, Ri, U, R],

    # Ga
    (
        (' ','d','c','a',' '),
        ('b','x','x','x','c'),
        ('d','x','x','x','b'),
        ('b','x','x','x','d'),
        (' ','c','a','a',' ')
    ): [R2, u, Ri, U, Ri, Ui, R, ui, R2, Fi, U, F],

    # Gb
    (
        (' ','a','c','d',' '),
        ('c','x','x','x','b'),
        ('d','x','x','x','b'),
        ('c','x','x','x','a'),
        (' ','b','a','d',' ')
    ): [Ri, Ui, R, B2, u, Bi, U, B, Ui, B, ui, B2],

    # Gc
    (
        (' ','a','c','c',' '),
        ('b','x','x','x','d'),
        ('d','x','x','x','b'),
        ('b','x','x','x','a'),
        (' ','d','a','c',' ')
    ): [R2, ui, R, Ui, R, U, Ri, u, R2, B, Ui, Bi],

    # Gd
    (
        (' ','b','c','d',' '),
        ('a','x','x','x','c'),
        ('d','x','x','x','b'),
        ('a','x','x','x','b'),
        (' ','c','a','d',' ')
    ): [R, U, Ri, F2, ui, F, Ui, Fi, U, Fi, u, F2],

    # Ja
    (
        (' ','a','c','c',' '),
        ('d','x','x','x','b'),
        ('d','x','x','x','b'),
        ('c','x','x','x','b'),
        (' ','a','a','d',' ')
    ): [Bi, U, Fi, U2, B, Ui, Bi, U2, B, F],

    # Jb
    (
        (' ','c','c','a',' '),
        ('d','x','x','x','b'),
        ('d','x','x','x','b'),
        ('d','x','x','x','c'),
        (' ','b','a','a',' ')
    ): [R, U, Ri, Fi, R, U, Ri, Ui, Ri, F, R2, Ui, Ri],

    # Ra
    (
        (' ','b','c','a',' '),
        ('c','x','x','x','c'),
        ('d','x','x','x','b'),
        ('a','x','x','x','b'),
        (' ','d','a','d',' ')
    ): [L, U2, Li, U2, L, Fi, Li, Ui, L, U, L, F, L2],

    # Rb
    (
        (' ','c','c','b',' '),
        ('a','x','x','x','d'),
        ('d','x','x','x','b'),
        ('a','x','x','x','c'),
        (' ','d','a','b',' ')
    ): [R2, F, R, U, R, Ui, Ri, Fi, R, U2, Ri, U2, R],

    # T
    (
        (' ','c','c','d',' '),
        ('b','x','x','x','a'),
        ('d','x','x','x','b'),
        ('b','x','x','x','c'),
        (' ','a','a','d',' ')
    ): [R, U, Ri, Ui, Ri, F, R2, Ui, Ri, Ui, R, U, Ri, Fi],

    # E
    (
        (' ','d','c','b',' '),
        ('a','x','x','x','a'),
        ('d','x','x','x','b'),
        ('c','x','x','x','c'),
        (' ','d','a','b',' ')
    ): [Li, B, L, Fi, Li, Bi, L, F, Li, Bi, L, Fi, Li, B, L, F],

    # Na
    (
        (' ','c','c','a',' '),
        ('b','x','x','x','b'),
        ('d','x','x','x','b'),
        ('d','x','x','x','d'),
        (' ','c','a','a',' ')
    ): [L, Ui, R, U2, Li, U, Ri, L, Ui, R, U2, Li, U, Ri],

    # Nb
    (
        (' ','a','c','c',' '),
        ('d','x','x','x','d'),
        ('d','x','x','x','b'),
        ('b','x','x','x','b'),
        (' ','a','a','c',' ')
    ): [Ri, U, Li, U2, R, Ui, L, Ri, U, Li, U2, R, Ui, L],

    # V
    (
        (' ','a','c','b',' '),
        ('c','x','x','x','c'),
        ('d','x','x','x','b'),
        ('d','x','x','x','d'),
        (' ','a','a','b',' ')
    ): [Ri, U, Ri, Ui, Bi, Ri, B2, Ui, Bi, U, Bi, R, B, R],

    # Y
    (
        (' ','a','c','d',' '),
        ('b','x','x','x','b'),
        ('d','x','x','x','b'),
        ('c','x','x','x','c'),
        (' ','a','a','d',' ')
    ): [F, Ri, F, R2, Ui, Ri, Ui, R, U, Ri, Fi, R, U, Ri, Ui, Fi],

    # H
    (
        (' ','a','c','a',' '),
        ('b','x','x','x','d'),
        ('d','x','x','x','b'),
        ('b','x','x','x','d'),
        (' ','c','a','c',' ')
    ): [M2, U, M2, U2, M2, U, M2],

    # Ua
    (
        (' ','c','c','c',' '),
        ('b','x','x','x','a'),
        ('d','x','x','x','b'),
        ('b','x','x','x','a'),
        (' ','d','a','d',' ')
    ): [M2, U, M, U2, Mi, U, M2],

    # Ub
    (
        (' ','c','c','c',' '),
        ('a','x','x','x','d'),
        ('d','x','x','x','b'),
        ('a','x','x','x','d'),
        (' ','b','a','b',' ')
    ): [M2, Ui, M, U2, Mi, Ui, M2],

    # Z
    (
        (' ','b','c','b',' '),
        ('a','x','x','x','c'),
        ('d','x','x','x','b'),
        ('a','x','x','x','c'),
        (' ','d','a','d',' ')
    ): [Mi, U, M2, U, M2, U, Mi, U2, M2],

    # Already solved
    (
        (' ','c','c','c',' '),
        ('d','x','x','x','b'),
        ('d','x','x','x','b'),
        ('d','x','x','x','b'),
        (' ','a','a','a',' ')
    ): []
}

##########################################################################
##########################################################################
##########################################################################
